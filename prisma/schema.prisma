// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Borrower
model User {
  id            Int                @id @default(autoincrement())
  name          String
  email         String             @unique
  password      String
  // role String //No need for Admin and Borrower role
  createdAt    DateTime           @default(now()) @map("created_at") //registered date 
  updatedAt    DateTime           @default(now()) @map("updated_at")

  //Relationships
  borrowedBooks BorrowingProcess[]

  @@map("users")
}

model Book {
  id            Int                @id @default(autoincrement())
  title         String
  author        String
  isbn          String             @unique
  quantity      Int                @default(1) //At least one book if not specified
  shelfLocation String             @map("shelf_location")
  
  //Relationships
  borrowedBooks BorrowingProcess[]

  @@index([title])
  @@index([author])
  @@map("books")
}

//Can either be Borrowing Audit OR just many to many relationship to show books being borrowed currently.
model BorrowingProcess {
  id         Int       @id @default(autoincrement())
  borrowerId Int       @map("borrower_id")
  bookId     Int       @map("book_id")
  dueDate    DateTime  @map("due_date") //time to return
  returnDate DateTime? @map("return_date") //return date is null until book is returned
  //Relationships
  book       Book      @relation(fields: [bookId], references: [id])
  borrower   User      @relation(fields: [borrowerId], references: [id])

  @@unique([bookId, borrowerId], name: "borrowingProcessKey") // Composite index for efficient lookups
  @@index([dueDate]) // Index for listing overdue books
  @@map("borrowing_process")
}
